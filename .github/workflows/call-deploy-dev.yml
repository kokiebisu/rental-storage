on:
  workflow_call:

jobs:
  deploy-terraform:
    name: Terraform
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - uses: dorny/paths-filter@v2
      #   id: changes
      #   with:
      #     filters: |
      #       terraform:
      #         - 'terraform/**'
      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 6.0.2
        # if: steps.changes.outputs.package == 'true'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform config
        run: pnpm run terraform:setup:dev
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        # if: steps.changes.outputs.package == 'true'

      - name: Terraform init
        id: init
        run: terraform init
        shell: bash
        working-directory: ./terraform

      # - name: Terraform Format
      #   id: fmt
      #   run: |
      #     export TF_VAR_namespace='rental-storage' \
      #     export TF_VAR_region='us-east-1' \
      #     export TF_VAR_booking_table_name='booking' \
      #     export TF_VAR_listing_db_username='postgres' \
      #     export TF_VAR_listing_db_password='password' \
      #     export TF_VAR_listing_db_name='listings' \
      #     export TF_VAR_user_db_username='postgres' \
      #     export TF_VAR_user_db_password='password' \
      #     export TF_VAR_user_db_name='users' \
      #     terraform fmt -check
      #   shell: bash
      #   working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        shell: bash
        env:
          TF_VAR_namespace: rental-storage
          TF_VAR_region: us-east-1
          TF_VAR_booking_table_name: booking
          TF_VAR_listing_db_username: postgres
          TF_VAR_listing_db_password: password
          TF_VAR_listing_db_name: listings
          TF_VAR_user_db_username: postgres
          TF_VAR_user_db_password: password
          TF_VAR_user_db_name: users
        working-directory: ./terraform

      - name: Terraform plan
        id: plan
        run: |
          export TF_VAR_namespace='rental-storage' \
          export TF_VAR_region='us-east-1' \
          export TF_VAR_booking_table_name='booking' \
          export TF_VAR_listing_db_username='postgres' \
          export TF_VAR_listing_db_password='password' \
          export TF_VAR_listing_db_name='listings' \
          export TF_VAR_user_db_username='postgres' \
          export TF_VAR_user_db_password='password' \
          export TF_VAR_user_db_name='users' \
          terraform plan -no-color -input=false
        shell: bash
        working-directory: ./terraform

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  deploy-composition:
    name: Composition
    needs: [deploy-terraform]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'packages/composition/**'
      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 6.0.2
        if: steps.changes.outputs.package == 'true'

      - name: Install global dependencies
        run: pnpm install -g serverless@2.72.3
        if: steps.changes.outputs.package == 'true'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2

      - name: Terraform init, plan and apply
        run: |
          cd packages/composition
          pnpm install --frozen-lockfile
        if: steps.changes.outputs.package == 'true'

      # - name: Deploy
      #   run: |
      #     cd packages/composition
      #     serverless deploy --config serverless.dev.yml --stage dev
      #   if: steps.changes.outputs.package == 'true'
      #     echo "** Running Terraform Plan**"
      #     terraform plan
      #   working-directory: ./terraform

      # - name: Terraform Destroy
      #   run: |
      #     echo "** Running Terraform Destroy**"
      #     terraform plan -destroy
      #   #        terraform destroy -auto-approve
      #   working-directory: ${{ github.event.inputs.tfpath }}

      # - uses: pnpm/action-setup@v2.2.4
      #   with:
      #     version: 6.0.2
      #   if: steps.changes.outputs.package == 'true'

      # - name: Install global dependencies
      #   run: pnpm install -g serverless
      #   if: steps.changes.outputs.package == 'true'

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1-node16
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1
      #   if: steps.changes.outputs.package == 'true'

      # - name: Install dependencies
      #   run: |
      #     cd ${{ matrix.package }}
      #     pnpm install --frozen-lockfile
      # if: steps.changes.outputs.terraform == 'true'

  # deploy-composition:
  #   name: Composition
  #   needs: [deploy-terraform]
  #   timeout-minutes: 15
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - uses: dorny/paths-filter@v2
  #       id: changes
  #       with:
  #         filters: |
  #           package:
  #             - 'packages/composition/**'
  #     - uses: pnpm/action-setup@v2.2.4
  #       with:
  #         version: 6.0.2
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Install global dependencies
  #       run: pnpm install -g serverless@2.72.3
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Install dependencies
  #       run: |
  #         cd packages/${{ matrix.package }}
  #         pnpm install --frozen-lockfile
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Deploy
  #       run: |
  #         cd packages/${{ matrix.package }}
  #         serverless deploy --config serverless.dev.yml --stage dev
  #       if: steps.changes.outputs.package == 'true'

  # deploy-service:
  #   name: Service
  #   needs: [deploy-terraform]
  #   timeout-minutes: 15
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   strategy:
  #     matrix:
  #       package:
  #         - authentication
  #         - authorizer
  #         - booking
  #         - image
  #         - listing
  #         - payment
  #         - slack
  #         - user
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - uses: dorny/paths-filter@v2
  #       id: changes
  #       with:
  #         filters: |
  #           package:
  #             - 'packages/service-${{ matrix.package }}/**'
  #     - uses: pnpm/action-setup@v2.2.4
  #       with:
  #         version: 6.0.2
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Install global dependencies
  #       run: pnpm install -g serverless@2.72.3
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Install dependencies
  #       run: |
  #         cd packages/service-${{ matrix.package }}
  #         pnpm install --frozen-lockfile
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Deploy
  #       run: |
  #         cd packages/service-${{ matrix.package }}
  #         serverless deploy --config serverless.dev.yml --stage dev
  #       if: steps.changes.outputs.package == 'true'

  # deploy-appsync:
  #   name: AppSync
  #   needs: [deploy-terraform, deploy-service]
  #   timeout-minutes: 15
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - uses: dorny/paths-filter@v2
  #       id: changes
  #       with:
  #         filters: |
  #           package:
  #             - 'appsync/**'

  #     - uses: pnpm/action-setup@v2.2.4
  #       with:
  #         version: 6.0.2
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Install global dependencies
  #       run: pnpm install -g serverless@2.72.3
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Install dependencies
  #       run: |
  #         cd infrastructure/aws/resources/${{ matrix.package }}
  #         pnpm install --frozen-lockfile
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Deploy
  #       run: |
  #         cd infrastructure/aws/resources/${{ matrix.package }}
  #         serverless deploy --config serverless.dev.yml --stage dev
  #       if: steps.changes.outputs.package == 'true'
