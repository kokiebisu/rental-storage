on:
  workflow_call:

jobs:
  deploy-terraform:
    name: Terraform
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            terraform:
              - 'terraform/**'

        # - uses: pnpm/action-setup@v2.2.4
        #   with:
        #     version: 6.0.2
        #   if: steps.changes.outputs.package == 'true'

        # - name: Install global dependencies
        #   run: pnpm install -g serverless
        #   if: steps.changes.outputs.package == 'true'

        # - name: Configure AWS credentials
        #   uses: aws-actions/configure-aws-credentials@v1-node16
        #   with:
        #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #     aws-region: us-east-1
        #   if: steps.changes.outputs.package == 'true'

        # - name: Install dependencies
        #   run: |
        #     cd ${{ matrix.package }}
        #     pnpm install --frozen-lockfile
        # if: steps.changes.outputs.terraform == 'true'

      - name: Generate secrets file
        run: |
          cd terraform
          cat <<EOF > terraform.tfvars
          namespace   = ${{ secrets.NAMESPACE }}
          region      = ${{ secrets.REGIOn }}
          profile     = ${{ secrets.PROFILE }}
          environment = ${{ secrets.ENVIRONMENT }}

          booking_table_name = ${{ secrets.BOOKING_TABLE_NAME }}

          listing_db_username = ${{ secrets.LISTING_DB_USERNAME }}
          listing_db_password = ${{ secrets.LISTING_DB_PASSWORD }}
          listing_db_name     = ${{ secrets.LISTING_DB_NAME }}

          user_db_username = ${{ secrets.USER_DB_USERNAME }}
          user_db_password = ${{ secrets.USER_DB_PASSWORD }}
          user_db_name     = ${{ secrets.USER_DB_NAME }}
          EOF
        if: steps.changes.outputs.terraform == 'true'

      - name: read
        run: |
          cd terraform
          cat terraform.tfvars
        if: steps.changes.outputs.terraform == 'true'

      - name: Setup
        run: |
          cd terraform
          terraform init
        if: steps.changes.outputs.terraform == 'true'

      - name: Deploy
        run: |
          cd terraform
          terraform apply -auto-approve
        if: steps.changes.outputs.terraform == 'true'

  # deploy-apigateway:
  #   name: ApiGateway
  #   timeout-minutes: 15
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - uses: dorny/paths-filter@v2
  #       id: changes
  #       with:
  #         filters: |
  #           package:
  #             - 'infrastructure/aws/resources/${{ matrix.package }}/**'

  #     - uses: pnpm/action-setup@v2.2.4
  #       with:
  #         version: 6.0.2
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Install global dependencies
  #       run: pnpm install -g serverless
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Install dependencies
  #       run: |
  #         cd infrastructure/aws/resources/${{ matrix.package }}
  #         pnpm install --frozen-lockfile
  #       if: steps.changes.outputs.package == 'true'

  #     - name: Deploy
  #       run: |
  #         cd infrastructure/aws/resources/${{ matrix.package }}
  #         serverless deploy --config serverless.dev.yml --stage dev
  #       if: steps.changes.outputs.package == 'true'

  deploy-composition:
    name: Composition
    needs: [deploy-terraform]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'packages/composition/**'
      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 6.0.2
        if: steps.changes.outputs.package == 'true'

      - name: Install global dependencies
        run: pnpm install -g serverless@2.72.3
        if: steps.changes.outputs.package == 'true'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: steps.changes.outputs.package == 'true'

      - name: Install dependencies
        run: |
          cd packages/${{ matrix.package }}
          pnpm install --frozen-lockfile
        if: steps.changes.outputs.package == 'true'

      - name: Deploy
        run: |
          cd packages/${{ matrix.package }}
          serverless deploy --config serverless.dev.yml --stage dev
        if: steps.changes.outputs.package == 'true'

  deploy-service:
    name: Service
    needs: [deploy-terraform]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      matrix:
        package:
          - authentication
          - authorizer
          - booking
          - image
          - listing
          - payment
          - slack
          - user
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'packages/service-${{ matrix.package }}/**'
      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 6.0.2
        if: steps.changes.outputs.package == 'true'

      - name: Install global dependencies
        run: pnpm install -g serverless@2.72.3
        if: steps.changes.outputs.package == 'true'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: steps.changes.outputs.package == 'true'

      - name: Install dependencies
        run: |
          cd packages/service-${{ matrix.package }}
          pnpm install --frozen-lockfile
        if: steps.changes.outputs.package == 'true'

      - name: Deploy
        run: |
          cd packages/service-${{ matrix.package }}
          serverless deploy --config serverless.dev.yml --stage dev
        if: steps.changes.outputs.package == 'true'

  deploy-appsync:
    name: AppSync
    needs: [deploy-terraform, deploy-service]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'appsync/**'

      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 6.0.2
        if: steps.changes.outputs.package == 'true'

      - name: Install global dependencies
        run: pnpm install -g serverless@2.72.3
        if: steps.changes.outputs.package == 'true'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: steps.changes.outputs.package == 'true'

      - name: Install dependencies
        run: |
          cd infrastructure/aws/resources/${{ matrix.package }}
          pnpm install --frozen-lockfile
        if: steps.changes.outputs.package == 'true'

      - name: Deploy
        run: |
          cd infrastructure/aws/resources/${{ matrix.package }}
          serverless deploy --config serverless.dev.yml --stage dev
        if: steps.changes.outputs.package == 'true'
