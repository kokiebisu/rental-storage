on:
  workflow_call:

jobs:
  setup:
    name: Setup environment
    strategy:
      matrix:
        package:
          - booking
          - listings
          - user
          - image
          - slack
          - authentication
          - authorizer
          - payment
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'packages/service-${{ matrix.package }}/**'

      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 6.0.2

      - name: Install root packages
        run: pnpm install --frozen-lockfile
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: steps.changes.outputs.package == 'true'

      - name: Install dependencies
        run: |
          cd packages/service-${{ matrix.package }}
          pnpm install --frozen-lockfile
        shell: bash
        if: steps.changes.outputs.package == 'true'

      - name: Generate env files
        run: |
          cd packages/service-${{ matrix.package }} 
          pnpm run generate:env:dev
        shell: bash
        if: steps.changes.outputs.package == 'true'

      - name: Echo
        run: |
          cd packages/service-${{ matrix.package }}
          cat .env
        shell: bash
        if: steps.changes.outputs.package == 'true'

      - uses: actions/upload-artifact@v3
        with:
          name: env-${{ matrix.package }}-${{ github.sha }}
          path: packages/service-${{ matrix.package }}/.env
          retention-days: 1
        if: steps.changes.outputs.package == 'true'

  integration-test-typescript:
    name: Typescript
    needs: [setup]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - booking
          - listings
          - user
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'packages/service-${{ matrix.package }}/**'

      - name: Install global dependencies
        run: |
          npm install -g pnpm
        shell: bash
        if: steps.changes.outputs.package == 'true'

      - name: Install dependencies
        run: |
          cd packages/service-${{ matrix.package }}
          pnpm install --frozen-lockfile
        shell: bash
        if: steps.changes.outputs.package == 'true'

      - uses: actions/download-artifact@v3
        with:
          name: dist-${{ matrix.package }}-${{ github.sha }}
          path: packages/service-${{ matrix.package }}/dist
        if: steps.changes.outputs.package == 'true'

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: dist-${{ matrix.package }}-${{ github.sha }}

      - uses: actions/download-artifact@v3
        with:
          name: env-${{ matrix.package }}-${{ github.sha }}
          path: packages/service-${{ matrix.package }}/.env
        if: steps.changes.outputs.package == 'true'

      - name: Echo .env
        run: |
          cd packages/service-${{ matrix.package }}
          cat .env
        shell: bash
        if: steps.changes.outputs.package == 'true'

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: env-${{ matrix.package }}-${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: steps.changes.outputs.package == 'true'

      - name: Test ${{ matrix.package }} service
        run: |
          cd packages/service-${{ matrix.package }}
          pnpm run test:integration
        if: steps.changes.outputs.package == 'true'

  integration-test-python:
    name: Python
    needs: [setup]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - image
          - slack
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'packages/service-${{ matrix.package }}/**'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: steps.changes.outputs.package == 'true'

      - name: Install global dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
        shell: bash
        if: steps.changes.outputs.package == 'true'

      - name: Test ${{ matrix.package }} service
        run: |
          cd packages/service-${{ matrix.package }}
          pip install -r requirements.txt
          make integration-test
        shell: bash
        if: steps.changes.outputs.package == 'true'

  integration-test-go:
    name: Go
    needs: [setup]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - authorizer
          - authentication
          - payment
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'packages-/service-${{ matrix.package }}/**'

      - uses: actions/download-artifact@v3
        with:
          name: bin-${{ matrix.package }}-${{ github.sha }}
          path: packages/service-${{ matrix.package }}/bin
        if: steps.changes.outputs.package == 'true'

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: bin-${{ matrix.package }}-${{ github.sha }}
        if: steps.changes.outputs.package == 'true'

      - uses: actions/download-artifact@v3
        with:
          name: env-${{ matrix.package }}-${{ github.sha }}
          path: packages/service-${{ matrix.package }}/.env
        if: steps.changes.outputs.package == 'true'

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: env-${{ matrix.package }}-${{ github.sha }}
        if: steps.changes.outputs.package == 'true'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: steps.changes.outputs.package == 'true'

      - name: Test ${{ matrix.package }} service
        run: |
          cd packages/service-${{ matrix.package }}
          make integration-test
        shell: bash
        if: steps.changes.outputs.package == 'true'
