on:
  workflow_call:

jobs:
  run-terraform:
    name: Terraform
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            package:
              - 'terraform/**'
              - '.github/**'

      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 6.0.2
        if: steps.changes.outputs.package == 'true'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        if: steps.changes.outputs.package == 'true'

      - name: Terraform config
        run: pnpm run terraform:setup:dev
        shell: bash
        if: steps.changes.outputs.package == 'true'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: steps.changes.outputs.package == 'true'

      - name: Terraform init
        id: init
        run: terraform init
        shell: bash
        working-directory: ./terraform
        if: steps.changes.outputs.package == 'true'

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          TF_VAR_namespace: rental-storage
          TF_VAR_region: us-east-1
          TF_VAR_booking_table_name: booking
          TF_VAR_listing_db_username: postgres
          TF_VAR_listing_db_password: password
          TF_VAR_listing_db_name: listings
          TF_VAR_user_db_username: postgres
          TF_VAR_user_db_password: password
          TF_VAR_user_db_name: users
        shell: bash
        working-directory: ./terraform
        if: steps.changes.outputs.package == 'true'

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          TF_VAR_namespace: rental-storage
          TF_VAR_region: us-east-1
          TF_VAR_booking_table_name: booking
          TF_VAR_listing_db_username: postgres
          TF_VAR_listing_db_password: password
          TF_VAR_listing_db_name: listings
          TF_VAR_user_db_username: postgres
          TF_VAR_user_db_password: password
          TF_VAR_user_db_name: users
        shell: bash
        working-directory: ./terraform
        if: steps.changes.outputs.package == 'true'

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          TF_VAR_namespace: rental-storage
          TF_VAR_environment: dev
          TF_VAR_region: us-east-1
          TF_VAR_booking_table_name: booking
          TF_VAR_listing_db_username: postgres
          TF_VAR_listing_db_password: password
          TF_VAR_listing_db_name: listings
          TF_VAR_user_db_username: postgres
          TF_VAR_user_db_password: password
          TF_VAR_user_db_name: users
        shell: bash
        working-directory: ./terraform
        if: steps.changes.outputs.package == 'true'

      - name: Update Pull Request
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        if: steps.changes.outputs.package == 'true'

      - name: Terraform Plan Status
        run: exit 1
        if: steps.plan.outcome == 'failure' && steps.changes.outputs.package == 'true'

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          TF_VAR_namespace: rental-storage
          TF_VAR_environment: dev
          TF_VAR_region: us-east-1
          TF_VAR_booking_table_name: booking
          TF_VAR_listing_db_username: postgres
          TF_VAR_listing_db_password: password
          TF_VAR_listing_db_name: listings
          TF_VAR_user_db_username: postgres
          TF_VAR_user_db_password: password
          TF_VAR_user_db_name: users
        shell: bash
        working-directory: ./terraform
        if: github.ref == 'refs/heads/dev' && steps.changes.outputs.package == 'true'
