// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	amount "github.com/kokiebisu/rental-storage/service-booking/internal/core/domain/amount"
	booking "github.com/kokiebisu/rental-storage/service-booking/internal/core/domain/booking"

	errors "github.com/kokiebisu/rental-storage/service-booking/internal/error"

	item "github.com/kokiebisu/rental-storage/service-booking/internal/core/domain/item"

	mock "github.com/stretchr/testify/mock"
)

// BookingService is an autogenerated mock type for the BookingService type
type BookingService struct {
	mock.Mock
}

// CreateBooking provides a mock function with given fields: amountDTO, userId, listingId, itemsDTO
func (_m *BookingService) CreateBooking(amountDTO amount.DTO, userId string, listingId string, itemsDTO []item.DTO) (string, *errors.CustomError) {
	ret := _m.Called(amountDTO, userId, listingId, itemsDTO)

	var r0 string
	if rf, ok := ret.Get(0).(func(amount.DTO, string, string, []item.DTO) string); ok {
		r0 = rf(amountDTO, userId, listingId, itemsDTO)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *errors.CustomError
	if rf, ok := ret.Get(1).(func(amount.DTO, string, string, []item.DTO) *errors.CustomError); ok {
		r1 = rf(amountDTO, userId, listingId, itemsDTO)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// FindUserBookings provides a mock function with given fields: userId
func (_m *BookingService) FindUserBookings(userId string) ([]booking.Entity, *errors.CustomError) {
	ret := _m.Called(userId)

	var r0 []booking.Entity
	if rf, ok := ret.Get(0).(func(string) []booking.Entity); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]booking.Entity)
		}
	}

	var r1 *errors.CustomError
	if rf, ok := ret.Get(1).(func(string) *errors.CustomError); ok {
		r1 = rf(userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewBookingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookingService creates a new instance of BookingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookingService(t mockConstructorTestingTNewBookingService) *BookingService {
	mock := &BookingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
