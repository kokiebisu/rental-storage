// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	item "github.com/kokiebisu/rental-storage/service-user/internal/core/domain/item"
	mock "github.com/stretchr/testify/mock"

	user "github.com/kokiebisu/rental-storage/service-user/internal/core/domain/user"
)

// UserFactory is an autogenerated mock type for the UserFactory type
type UserFactory struct {
	mock.Mock
}

// New provides a mock function with given fields: uid, firstName, lastName, emailAddress, password, items, createdAt
func (_m *UserFactory) New(uid string, firstName string, lastName string, emailAddress string, password string, items []item.Entity, createdAt string) user.Entity {
	ret := _m.Called(uid, firstName, lastName, emailAddress, password, items, createdAt)

	var r0 user.Entity
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []item.Entity, string) user.Entity); ok {
		r0 = rf(uid, firstName, lastName, emailAddress, password, items, createdAt)
	} else {
		r0 = ret.Get(0).(user.Entity)
	}

	return r0
}

type mockConstructorTestingTNewUserFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserFactory creates a new instance of UserFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserFactory(t mockConstructorTestingTNewUserFactory) *UserFactory {
	mock := &UserFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
