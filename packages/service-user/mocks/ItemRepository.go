// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	item "github.com/kokiebisu/rental-storage/service-user/internal/core/domain/item"
	errors "github.com/kokiebisu/rental-storage/service-user/internal/error"

	mock "github.com/stretchr/testify/mock"
)

// ItemRepository is an autogenerated mock type for the ItemRepository type
type ItemRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: uid
func (_m *ItemRepository) Delete(uid string) *errors.CustomError {
	ret := _m.Called(uid)

	var r0 *errors.CustomError
	if rf, ok := ret.Get(0).(func(string) *errors.CustomError); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.CustomError)
		}
	}

	return r0
}

// FindOneById provides a mock function with given fields: uid
func (_m *ItemRepository) FindOneById(uid string) (item.Entity, *errors.CustomError) {
	ret := _m.Called(uid)

	var r0 item.Entity
	if rf, ok := ret.Get(0).(func(string) item.Entity); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(item.Entity)
	}

	var r1 *errors.CustomError
	if rf, ok := ret.Get(1).(func(string) *errors.CustomError); ok {
		r1 = rf(uid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: i
func (_m *ItemRepository) Save(i item.Entity) *errors.CustomError {
	ret := _m.Called(i)

	var r0 *errors.CustomError
	if rf, ok := ret.Get(0).(func(item.Entity) *errors.CustomError); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.CustomError)
		}
	}

	return r0
}

type mockConstructorTestingTNewItemRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewItemRepository creates a new instance of ItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemRepository(t mockConstructorTestingTNewItemRepository) *ItemRepository {
	mock := &ItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
