// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	amount "github.com/kokiebisu/rental-storage/service-listing/internal/core/domain/listing/amount"
	errors "github.com/kokiebisu/rental-storage/service-listing/internal/error"

	listing "github.com/kokiebisu/rental-storage/service-listing/internal/core/domain/listing"

	mock "github.com/stretchr/testify/mock"
)

// ListingFactory is an autogenerated mock type for the ListingFactory type
type ListingFactory struct {
	mock.Mock
}

// New provides a mock function with given fields: title, lenderId, streetAddress, latitude, longitude, imageUrls, feeCurrency, feeAmount, feeType
func (_m *ListingFactory) New(title string, lenderId string, streetAddress string, latitude float32, longitude float32, imageUrls []string, feeCurrency amount.CurrencyType, feeAmount int64, feeType string) (listing.Entity, *errors.CustomError) {
	ret := _m.Called(title, lenderId, streetAddress, latitude, longitude, imageUrls, feeCurrency, feeAmount, feeType)

	var r0 listing.Entity
	if rf, ok := ret.Get(0).(func(string, string, string, float32, float32, []string, amount.CurrencyType, int64, string) listing.Entity); ok {
		r0 = rf(title, lenderId, streetAddress, latitude, longitude, imageUrls, feeCurrency, feeAmount, feeType)
	} else {
		r0 = ret.Get(0).(listing.Entity)
	}

	var r1 *errors.CustomError
	if rf, ok := ret.Get(1).(func(string, string, string, float32, float32, []string, amount.CurrencyType, int64, string) *errors.CustomError); ok {
		r1 = rf(title, lenderId, streetAddress, latitude, longitude, imageUrls, feeCurrency, feeAmount, feeType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewListingFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewListingFactory creates a new instance of ListingFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewListingFactory(t mockConstructorTestingTNewListingFactory) *ListingFactory {
	mock := &ListingFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
