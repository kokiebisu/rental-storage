// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/kokiebisu/rental-storage/service-authorizer/internal/core/domain"
	errors "github.com/kokiebisu/rental-storage/service-authorizer/internal/error"

	mock "github.com/stretchr/testify/mock"
)

// AuthorizerService is an autogenerated mock type for the AuthorizerService type
type AuthorizerService struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: token
func (_m *AuthorizerService) Authorize(token string) (domain.Claim, *errors.CustomError) {
	ret := _m.Called(token)

	var r0 domain.Claim
	var r1 *errors.CustomError
	if rf, ok := ret.Get(0).(func(string) (domain.Claim, *errors.CustomError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Claim); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(domain.Claim)
	}

	if rf, ok := ret.Get(1).(func(string) *errors.CustomError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthorizerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorizerService creates a new instance of AuthorizerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorizerService(t mockConstructorTestingTNewAuthorizerService) *AuthorizerService {
	mock := &AuthorizerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
