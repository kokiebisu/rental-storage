// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	customerror "github.com/kokiebisu/rental-storage/service-authentication/internal/error"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenStore is an autogenerated mock type for the TokenStore type
type TokenStore struct {
	mock.Mock
}

// DeleteTokens provides a mock function with given fields: userID
func (_m *TokenStore) DeleteTokens(userID string) *customerror.CustomError {
	ret := _m.Called(userID)

	var r0 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(string) *customerror.CustomError); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerror.CustomError)
		}
	}

	return r0
}

// GetTokens provides a mock function with given fields: userID
func (_m *TokenStore) GetTokens(userID string) (map[string]string, *customerror.CustomError) {
	ret := _m.Called(userID)

	var r0 map[string]string
	var r1 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(string) (map[string]string, *customerror.CustomError)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *customerror.CustomError); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// SetAccessToken provides a mock function with given fields: userID, token, expires
func (_m *TokenStore) SetAccessToken(userID string, token string, expires time.Duration) *customerror.CustomError {
	ret := _m.Called(userID, token, expires)

	var r0 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) *customerror.CustomError); ok {
		r0 = rf(userID, token, expires)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerror.CustomError)
		}
	}

	return r0
}

// SetRefreshToken provides a mock function with given fields: userID, token, expires
func (_m *TokenStore) SetRefreshToken(userID string, token string, expires time.Duration) *customerror.CustomError {
	ret := _m.Called(userID, token, expires)

	var r0 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) *customerror.CustomError); ok {
		r0 = rf(userID, token, expires)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerror.CustomError)
		}
	}

	return r0
}

type mockConstructorTestingTNewTokenStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenStore creates a new instance of TokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenStore(t mockConstructorTestingTNewTokenStore) *TokenStore {
	mock := &TokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
