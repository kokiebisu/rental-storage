// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	customerror "github.com/kokiebisu/rental-storage/service-authentication/internal/error"
	mock "github.com/stretchr/testify/mock"
)

// CryptoService is an autogenerated mock type for the CryptoService type
type CryptoService struct {
	mock.Mock
}

// HashPassword provides a mock function with given fields: password
func (_m *CryptoService) HashPassword(password string) (string, *customerror.CustomError) {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(string) *customerror.CustomError); ok {
		r1 = rf(password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// VerifyPassword provides a mock function with given fields: hashedPassword, plainPassword
func (_m *CryptoService) VerifyPassword(hashedPassword string, plainPassword string) (bool, *customerror.CustomError) {
	ret := _m.Called(hashedPassword, plainPassword)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedPassword, plainPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(string, string) *customerror.CustomError); ok {
		r1 = rf(hashedPassword, plainPassword)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewCryptoService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCryptoService creates a new instance of CryptoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCryptoService(t mockConstructorTestingTNewCryptoService) *CryptoService {
	mock := &CryptoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
