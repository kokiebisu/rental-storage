// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/kokiebisu/rental-storage/service-authentication/internal/core/domain"
	customerror "github.com/kokiebisu/rental-storage/service-authentication/internal/error"

	mock "github.com/stretchr/testify/mock"
)

// AuthenticationService is an autogenerated mock type for the AuthenticationService type
type AuthenticationService struct {
	mock.Mock
}

// SignIn provides a mock function with given fields: emailAddress, password
func (_m *AuthenticationService) SignIn(emailAddress string, password string) (string, *customerror.CustomError) {
	ret := _m.Called(emailAddress, password)

	var r0 string
	var r1 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(string, string) (string, *customerror.CustomError)); ok {
		return rf(emailAddress, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(emailAddress, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) *customerror.CustomError); ok {
		r1 = rf(emailAddress, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: emailAddress, firstName, lastName, password
func (_m *AuthenticationService) SignUp(emailAddress string, firstName string, lastName string, password string) (string, *customerror.CustomError) {
	ret := _m.Called(emailAddress, firstName, lastName, password)

	var r0 string
	var r1 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(string, string, string, string) (string, *customerror.CustomError)); ok {
		return rf(emailAddress, firstName, lastName, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(emailAddress, firstName, lastName, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) *customerror.CustomError); ok {
		r1 = rf(emailAddress, firstName, lastName, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// Verify provides a mock function with given fields: authenticationToken
func (_m *AuthenticationService) Verify(authenticationToken string) (*domain.Claims, *customerror.CustomError) {
	ret := _m.Called(authenticationToken)

	var r0 *domain.Claims
	var r1 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(string) (*domain.Claims, *customerror.CustomError)); ok {
		return rf(authenticationToken)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Claims); ok {
		r0 = rf(authenticationToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *customerror.CustomError); ok {
		r1 = rf(authenticationToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthenticationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticationService creates a new instance of AuthenticationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticationService(t mockConstructorTestingTNewAuthenticationService) *AuthenticationService {
	mock := &AuthenticationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
